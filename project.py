# -*- coding: utf-8 -*-
"""project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UxPgiBw8NQGOY1DWAjCdnpbpWvuK59Eh
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.cluster import AgglomerativeClustering
import scipy.cluster.hierarchy as sch
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.linear_model import SGDRegressor
from sklearn.metrics import mean_squared_error
from sklearn.metrics import median_absolute_error
from sklearn.preprocessing import LabelEncoder

# Load the dataset
data = pd.read_csv("/content/Leads Report 2021 Numeric Data.csv")

# Setting up page title and layout
st.title('Lead Report Analysis')
st.set_option('deprecation.showPyplotGlobalUse', False)

# Display the dataset
st.subheader('Dataset')
st.dataframe(data)

# Data description
st.subheader('Data Description')
st.write(data.describe())

# Checking null values
st.subheader('Null Values Check')
st.bar_chart(data.isna().sum())

# Heatmap
st.subheader('Correlation Heatmap')
plt.figure(figsize=(20, 20))
sns.heatmap(data.corr('pearson'), vmin=-1, vmax=1, cmap='coolwarm', square=True, annot=True)
st.pyplot()

# Distribution Plot
st.subheader('Distribution Plot')
sns.distplot(data['Capability of Logistics Service Providers'])
st.pyplot()

# Probplot
st.subheader('Probplot')
fig = plt.figure()
res = stats.probplot(data['Capability of Logistics Service Providers'], plot=plt)
st.pyplot()

# Scatter plot
st.subheader('Scatter Plot')
sns.scatterplot(x=data['Final Score'], y=data['Quality of Logistics Services'])
st.pyplot()

# PCA
st.subheader('Principal Component Analysis (PCA)')
pca = PCA(n_components=10)
principalComponents = pca.fit_transform(data.drop('Final Score', axis=1))
principalDf = pd.DataFrame(data=principalComponents, columns=['PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5', 'PCA6', 'PCA7', 'PCA8', 'PCA9', 'PCA10'], index=data.index)

kmeans = KMeans(n_clusters=4)
kmeans.fit(principalDf)
principalDf['PCA_SCORE'] = kmeans.predict(principalDf)

st.write(principalDf.head())

# Mean Squared Error Calculation
MSEValue = mean_squared_error(principalDf['PCA_SCORE'], data['Final Score'], multioutput='uniform_average')
st.write('Mean Squared Error Value is: ', MSEValue)

# Median Absolute Error Calculation
MdSEValue = median_absolute_error(principalDf['PCA_SCORE'], data['Final Score'])
st.write('Median Absolute Error Value is: ', MdSEValue)

# Dendrogram
st.subheader('Dendrogram')
figure, ax = plt.subplots(1, 1, figsize=(15, 9))
dendrogram = sch.dendrogram(sch.linkage(data.drop('Final Score', axis=1), method='complete'), labels=data.index, ax=ax)
st.pyplot()

# Splitting Data
X_train, X_test, y_train, y_test = train_test_split(data.drop('Final Score', axis=1), data['Final Score'], test_size=0.4, random_state=44, shuffle=True)

# Ridge Regression
st.subheader('Ridge Regression')
RidgeRegressionModel = Ridge(alpha=.2, random_state=33)
RidgeRegressionModel.fit(X_train, y_train)

train_score = RidgeRegressionModel.score(X_train, y_train)
test_score = RidgeRegressionModel.score(X_test, y_test)
coefs = RidgeRegressionModel.coef_
intercept = RidgeRegressionModel.intercept_

st.write('Train Score:', train_score)
st.write('Test Score:', test_score)
st.write('Coefficients:', coefs)
st.write('Intercept:', intercept)

# SGD Regression
st.subheader('SGD Regression')
SGDRegressionModel = SGDRegressor(alpha=.004, random_state=33, penalty='l2', loss='huber')
SGDRegressionModel.fit(X_train, y_train)

train_score_sgd = SGDRegressionModel.score(X_train, y_train)
test_score_sgd = SGDRegressionModel.score(X_test, y_test)
coefs_sgd = SGDRegressionModel.coef_
intercept_sgd = SGDRegressionModel.intercept_

st.write('Train Score:', train_score_sgd)
st.write('Test Score:', test_score_sgd)
st.write('Coefficients:', coefs_sgd)
st.write('Intercept:', intercept_sgd)



import streamlit as st
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import scipy.cluster.hierarchy as sch
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.linear_model import SGDRegressor
from sklearn.metrics import mean_squared_error
from sklearn.metrics import median_absolute_error
from visualizations import *

# Load the dataset
data = pd.read_csv("/content/Leads Report 2021 Numeric Data.csv")

# Setting up page title and layout
st.title('Lead Report Analysis')
st.set_option('deprecation.showPyplotGlobalUse', False)

# Display visualizations
display_dataset(data)
display_data_description(data)
display_null_values(data)
display_correlation_heatmap(data)
display_distribution_plot(data)
display_probplot(data)
display_scatter_plot(data)

# Principal Component Analysis
pca = PCA(n_components=10)
principalComponents = pca.fit_transform(data.drop('Final Score', axis=1))
principalDf = pd.DataFrame(data=principalComponents, columns=['PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5', 'PCA6', 'PCA7', 'PCA8', 'PCA9', 'PCA10'], index=data.index)
display_principal_component_analysis(principalDf)

# Dendrogram
display_dendrogram(data)
